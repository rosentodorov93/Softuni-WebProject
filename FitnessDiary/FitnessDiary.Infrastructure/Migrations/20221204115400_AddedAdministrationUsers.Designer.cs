// <auto-generated />
using System;
using FitnessDiary.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FitnessDiary.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221204115400_AddedAdministrationUsers")]
    partial class AddedAdministrationUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Account.AdministrationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AdministrationUsers");

                    b.HasData(
                        new
                        {
                            Id = "0c68b5c9-40f7-44de-b03b-0afe35157e35",
                            FirstName = "Admin",
                            LastName = "Adminov",
                            UserId = "cf28b02f-bcd9-4464-9100-6343cc8ca939"
                        },
                        new
                        {
                            Id = "066f7491-cf3e-481a-9afd-9a4e8e276a50",
                            FirstName = "Moderator",
                            LastName = "Moderatorov",
                            UserId = "02b52032-ec58-496e-b58e-0533479ff27d"
                        });
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Account.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ActivityLevelId")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CarbsPercent")
                        .HasColumnType("int");

                    b.Property<int>("FatsPercent")
                        .HasColumnType("int");

                    b.Property<int>("FitnessGoal")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("Gender")
                        .HasMaxLength(7)
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("NutritionId")
                        .HasColumnType("int");

                    b.Property<int>("ProteinPercent")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ActivityLevelId");

                    b.HasIndex("NutritionId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.ActivityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ActivityLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Light ",
                            Value = 1.375
                        },
                        new
                        {
                            Id = 2,
                            Type = "Moderate ",
                            Value = 1.55
                        },
                        new
                        {
                            Id = 3,
                            Type = "Very Active",
                            Value = 1.7250000000000001
                        },
                        new
                        {
                            Id = 4,
                            Type = "Extra Active",
                            Value = 1.8999999999999999
                        });
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Article", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.DiaryDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("NutritionId")
                        .HasColumnType("int");

                    b.Property<string>("WorkoutId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("NutritionId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("DiaryDays");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Food", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MeassureUnits")
                        .HasMaxLength(25)
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NutritionId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NutritionId");

                    b.HasIndex("UserId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = "00c51d79-b0a2-44c4-9dfd-cc197f24c3e8",
                            IsActive = true,
                            MeassureUnits = 2,
                            Name = "Egg Size M",
                            NutritionId = 3,
                            Type = "Protein"
                        },
                        new
                        {
                            Id = "8070aa93-ea4c-477e-972b-aa3370f2d701",
                            IsActive = true,
                            MeassureUnits = 2,
                            Name = "Banana",
                            NutritionId = 4,
                            Type = "Fruit"
                        },
                        new
                        {
                            Id = "7bbc16e1-faa6-46ad-90ba-3dc038105ea2",
                            IsActive = true,
                            MeassureUnits = 1,
                            Name = "Potato",
                            NutritionId = 5,
                            Type = "Vegetables"
                        });
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("FoodId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecipeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.NutritionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<double>("Fats")
                        .HasColumnType("float");

                    b.Property<double>("Proteins")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Nutritions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Calories = 2500.0,
                            Carbohydrates = 245.0,
                            Fats = 45.0,
                            Proteins = 105.0
                        },
                        new
                        {
                            Id = 2,
                            Calories = 3500.0,
                            Carbohydrates = 275.0,
                            Fats = 65.0,
                            Proteins = 145.0
                        },
                        new
                        {
                            Id = 3,
                            Calories = 66.0,
                            Carbohydrates = 0.29999999999999999,
                            Fats = 4.5999999999999996,
                            Proteins = 6.4000000000000004
                        },
                        new
                        {
                            Id = 4,
                            Calories = 89.0,
                            Carbohydrates = 23.0,
                            Fats = 0.29999999999999999,
                            Proteins = 1.0
                        },
                        new
                        {
                            Id = 5,
                            Calories = 77.0,
                            Carbohydrates = 17.0,
                            Fats = 0.10000000000000001,
                            Proteins = 2.0
                        });
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Recipe", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("CaloriesPerServing")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NutrtionId")
                        .HasColumnType("int");

                    b.Property<int>("ServingsSize")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NutrtionId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Serving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("DiaryDayId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NutritionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiaryDayId");

                    b.HasIndex("NutritionId");

                    b.ToTable("Servings");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.WorkoutEntites.Exercise", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BodyPart")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("WorkoutId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.WorkoutEntites.ExerciseTamplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BodyPart")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("SetCount")
                        .HasColumnType("int");

                    b.Property<string>("WorkoutTamplateId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutTamplateId");

                    b.ToTable("ExerciseTamplates");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.WorkoutEntites.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ExerciseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Load")
                        .HasColumnType("float");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.WorkoutEntites.Workout", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.WorkoutEntites.WorkoutTamplate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkoutTamplates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cd1439f9-201b-42ac-96d2-5f13fd35ad5a",
                            ConcurrencyStamp = "0d1b21f4-ad82-4365-83e4-889624bd0626",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "312a798827de4362920a10e2a2b12e0c",
                            ConcurrencyStamp = "beb7ec18c2d24b65b6c4e2cfaf0bb03b",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "6a651666-0353-4a96-b3eb-d6b78010b6ba",
                            ConcurrencyStamp = "a0827383-cf6f-4400-bc86-bdaf2dc35765",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cf28b02f-bcd9-4464-9100-6343cc8ca939",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9a0b9f73-86c0-4935-89fd-ee8f1619184a",
                            Email = "admin@mail.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.BG",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEK9RX06LE1JZ99MdmrHxEp3rUGjqEBpkTPzvyGkO+SKmHh/SYZWEPs+80CfNg+Mr7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "adada2c0-e76f-471e-acb0-b366906c6d29",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "02b52032-ec58-496e-b58e-0533479ff27d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abdfce6e-4c94-4024-a1eb-ac6a485e1d9b",
                            Email = "moderator@mail.bg",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MODERATOR@MAIL.BG",
                            NormalizedUserName = "MODERATOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEP/dlWH2sHs0+ZE3WgvBq+PXApaE77kYMSQxqgynmsbZ6LWZp2RNfb7530SWGgA/wg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "573b6a51-bb79-4487-b4bf-9f14100eba01",
                            TwoFactorEnabled = false,
                            UserName = "moderator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cf28b02f-bcd9-4464-9100-6343cc8ca939",
                            RoleId = "cd1439f9-201b-42ac-96d2-5f13fd35ad5a"
                        },
                        new
                        {
                            UserId = "02b52032-ec58-496e-b58e-0533479ff27d",
                            RoleId = "6a651666-0353-4a96-b3eb-d6b78010b6ba"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Account.AdministrationUser", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Account.ApplicationUser", b =>
                {
                    b.HasOne("FitnessDiary.Infrastructure.Data.ActivityLevel", "ActivityLevel")
                        .WithMany()
                        .HasForeignKey("ActivityLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessDiary.Infrastructure.Data.NutritionData", "TargetNutrients")
                        .WithMany()
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityLevel");

                    b.Navigation("TargetNutrients");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Article", b =>
                {
                    b.HasOne("FitnessDiary.Infrastructure.Data.Account.ApplicationUser", null)
                        .WithMany("Articles")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.DiaryDay", b =>
                {
                    b.HasOne("FitnessDiary.Infrastructure.Data.Account.ApplicationUser", null)
                        .WithMany("Diary")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("FitnessDiary.Infrastructure.Data.NutritionData", "Nutrition")
                        .WithMany()
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessDiary.Infrastructure.Data.WorkoutEntites.Workout", "Workout")
                        .WithMany()
                        .HasForeignKey("WorkoutId");

                    b.Navigation("Nutrition");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Food", b =>
                {
                    b.HasOne("FitnessDiary.Infrastructure.Data.NutritionData", "Nutrition")
                        .WithMany()
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessDiary.Infrastructure.Data.Account.ApplicationUser", "User")
                        .WithMany("Foods")
                        .HasForeignKey("UserId");

                    b.Navigation("Nutrition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Ingredient", b =>
                {
                    b.HasOne("FitnessDiary.Infrastructure.Data.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessDiary.Infrastructure.Data.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Recipe", b =>
                {
                    b.HasOne("FitnessDiary.Infrastructure.Data.NutritionData", "Nutrition")
                        .WithMany()
                        .HasForeignKey("NutrtionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessDiary.Infrastructure.Data.Account.ApplicationUser", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutrition");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Serving", b =>
                {
                    b.HasOne("FitnessDiary.Infrastructure.Data.DiaryDay", "DiaryDay")
                        .WithMany("Servings")
                        .HasForeignKey("DiaryDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessDiary.Infrastructure.Data.NutritionData", "Nutrition")
                        .WithMany()
                        .HasForeignKey("NutritionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiaryDay");

                    b.Navigation("Nutrition");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.WorkoutEntites.Exercise", b =>
                {
                    b.HasOne("FitnessDiary.Infrastructure.Data.WorkoutEntites.Workout", null)
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutId");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.WorkoutEntites.ExerciseTamplate", b =>
                {
                    b.HasOne("FitnessDiary.Infrastructure.Data.WorkoutEntites.WorkoutTamplate", null)
                        .WithMany("Exercises")
                        .HasForeignKey("WorkoutTamplateId");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.WorkoutEntites.Set", b =>
                {
                    b.HasOne("FitnessDiary.Infrastructure.Data.WorkoutEntites.Exercise", "Exercise")
                        .WithMany("Sets")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.WorkoutEntites.WorkoutTamplate", b =>
                {
                    b.HasOne("FitnessDiary.Infrastructure.Data.Account.ApplicationUser", "User")
                        .WithMany("WorkoutTamplates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Account.ApplicationUser", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Diary");

                    b.Navigation("Foods");

                    b.Navigation("Recipes");

                    b.Navigation("WorkoutTamplates");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.DiaryDay", b =>
                {
                    b.Navigation("Servings");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.Recipe", b =>
                {
                    b.Navigation("Ingredients");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.WorkoutEntites.Exercise", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.WorkoutEntites.Workout", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("FitnessDiary.Infrastructure.Data.WorkoutEntites.WorkoutTamplate", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
